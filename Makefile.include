# Name: Makefile_target_STM
# Author: Daniel Nery Silva de Oliveira
# ThundeRatz Robotics Team
# 01/2019

#   In this file, most compiler configurations are set,
# (i.e. compiler flags, input files, etc.)
#   Tune the lines below only if you know what you are doing:

######################################################################
## Output configuration
######################################################################

# Verbosity
ifeq ($(VERBOSE), 0)
    AT := @
else
    AT :=
endif

# Optmization
ifeq ($(DEBUG), 1)
    OPT := -Og
else
    OPT := -Os
endif

######################################################################
## OS dependent commands
######################################################################

ifeq ($(OS),Windows_NT)
	CUBE_JAR  := "$(CUBE_PATH)\STM32CubeMX.exe"
    JLINK_EXE := JLink.exe
else
	CUBE_JAR := "$(CUBE_PATH)/STM32CubeMX"
    JLINK_EXE := JLinkExe
endif

######################################################################
## Input files
######################################################################

# Cube Directory
CUBE_DIR := cube

# Build Directory
BUILD_DIR := build

# Source Files
CUBE_SOURCES := $(wildcard $(CUBE_DIR)/*/*.c) $(wildcard $(CUBE_DIR)/*/*/*/*.c)
ASM_SOURCES  := $(wildcard $(CUBE_DIR)/*.s)

C_SOURCES    := $(wildcard src/*.c)

SUBM_SOURCES := $(foreach sm,$(SUBMODULES),$(wildcard $(SUBMODULE_DIR)/$(sm)/*.c))

# Include Paths
AS_INCLUDES :=
C_INCLUDES  :=                                                      \
	-I$(CUBE_DIR)/Drivers/CMSIS/Device/ST/$(DEVICE_FAMILY)/Include  \
	-I$(CUBE_DIR)/Drivers/CMSIS/Include                             \
	-I$(CUBE_DIR)/Drivers/$(DEVICE_FAMILY)_HAL_Driver/Inc           \
	-I$(CUBE_DIR)/Drivers/$(DEVICE_FAMILY)_HAL_Driver/Inc/Legacy    \
	-I$(CUBE_DIR)/Inc                                               \
	-Iinc                                                           \
	$(foreach sm,$(SUBMODULES),-I$(SUBMODULE_DIR)/$(sm))            \

# Object Files
CUBE_OBJECTS := $(addprefix $(BUILD_DIR)/,$(notdir $(CUBE_SOURCES:.c=.o)))
CUBE_OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
SUBM_OBJECTS := $(addprefix $(BUILD_DIR)/,$(notdir $(SUBM_SOURCES:.c=.o)))
OBJECTS      := $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))

vpath %.c $(sort $(dir $(CUBE_SOURCES)))
vpath %.c $(sort $(dir $(SUBM_SOURCES)))
vpath %.c $(sort $(dir $(C_SOURCES)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))


######################################################################
## Compiler settings
######################################################################

# Executables
CC      := arm-none-eabi-gcc
OBJCOPY := arm-none-eabi-objcopy
SIZE    := arm-none-eabi-size
GDB     := arm-none-eabi-gdb
HEX     := $(OBJCOPY) -O ihex
BIN     := $(OBJCOPY) -O binary -S

# Defines
AS_DEFS :=
C_DEFS  :=            \
	-DUSE_HAL_DRIVER  \
	-D$(DEVICE_DEF)   \

# Device specific flags
FLAGS := -mthumb
ifeq ($(DEVICE_FAMILY), $(filter $(DEVICE_FAMILY),STM32F0xx STM32L0xx))
FLAGS += -mcpu=cortex-m0
else ifeq ($(DEVICE_FAMILY), $(filter $(DEVICE_FAMILY),STM32F1xx STM32L1xx STM32F2xx STM32L2xx))
FLAGS += -mcpu=cortex-m3
else ifeq ($(DEVICE_FAMILY), $(filter $(DEVICE_FAMILY),STM32F3xx STM32L3xx STM32F4xx STM32L4xx))
FLAGS += -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard
else ifeq ($(DEVICE_FAMILY), $(filter $(DEVICE_FAMILY),STM32F7xx STM32L7xx))
FLAGS += -mcpu=cortex-m7 -mfpu=fpv4-sp-d16 -mfloat-abi=hard
else
$(error Unknown Device Family $(DEVICE_FAMILY))
endif

# General flags
ASFLAGS := $(FLAGS) $(AS_DEFS) $(AS_INCLUDES) \
    -Wall -Wextra -fdata-sections             \
    -ffunction-sections $(OPT)                \

CFLAGS  :=                                    \
	$(FLAGS) $(C_DEFS) $(C_INCLUDES)          \
	-Wall -Wextra -fdata-sections             \
	-ffunction-sections -fmessage-length=0    \
	$(OPT) -std=c11 -MMD -MP                  \

ifeq ($(DEBUG), 1)
CFLAGS += -g3
endif

# Linker Flags
LDSCRIPT := $(CUBE_DIR)/$(DEVICE_LD)_FLASH.ld

LIBS     := -lc -lm -lnosys
LIBDIR   :=
LDFLAGS  :=                                             \
	$(FLAGS) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR)  \
	$(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref  \
	-Wl,--gc-sections                                   \
